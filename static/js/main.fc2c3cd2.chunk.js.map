{"version":3,"sources":["components/card.js","components/cardList.js","components/searchBox.js","App.js","serviceWorker.js","index.js"],"names":["Card","info","className","src","id","alt","name","username","email","cardList","onSearchChange","event","searchField","target","value","filteredList","state","data","filter","toLowerCase","includes","setState","loading","fetch","then","response","json","user","searchChange","this","class","role","length","map","card","key","Component","searchBox","type","placeholder","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gLAkBeA,G,YAhBF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,yBAAKC,UAAU,yDACb,yBACEC,IAAG,+BAA0BF,EAAKG,GAA/B,iBACHC,IAAI,aAEN,yBAAKH,UAAU,QACb,4BAAKD,EAAKK,MACV,2BAAIL,EAAKM,UACT,2BAAIN,EAAKO,W,4BCNIC,E,kDACnB,aAAe,IAAD,8BACZ,gBAiBFC,eAAiB,SAACC,GAChB,IAAIC,EAAcD,EAAME,OAAOC,MAEzBC,EAAe,EAAKC,MAAMC,KAAKC,QAAO,SAACD,GAC3C,OAAOA,EAAKX,KAAKa,cAAcC,SAASR,EAAYO,kBAEtD,EAAKE,SAAS,CAAEN,kBAtBhB,EAAKC,MAAQ,CACXC,KAAM,GACNF,aAAc,GACdO,SAAS,GALC,E,gEASO,IAAD,OAElBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACJ,EAAKN,SAAS,CAAEJ,KAAMU,EAAMZ,aAAcY,EAAML,SAAS,S,+BAc7D,OACE,6BACE,kBAAC,EAAD,CAAWM,aAAcC,KAAKnB,iBAC7BmB,KAAKb,MAAMM,QAEV,yBAAKQ,MAAM,iDACT,qDACA,yBAAKA,MAAM,iBAAiBC,KAAK,UAC/B,0BAAMD,MAAM,WAAZ,gBAGFD,KAAKb,MAAMD,aAAaiB,OAAS,EAEnC,yBAAK9B,UAAU,kEACZ2B,KAAKb,MAAMD,aAAakB,KAAI,SAACC,GAAD,OAC3B,kBAAC,EAAD,CAAMC,IAAKD,EAAK9B,GAAIH,KAAMiC,QAK9B,yBAAKJ,MAAM,iDACT,sD,GAlD0BM,aCWvBC,EAfG,SAAC,GAAsB,IAApBT,EAAmB,EAAnBA,aACnB,OACE,yBAAK1B,UAAU,mBACb,2BACEA,UAAU,aACVoC,KAAK,OACLhC,KAAK,SACLF,GAAG,SACHmC,YAAY,4BACZC,SAAUZ,MCEHa,MATf,WACE,OACE,yBAAKvC,UAAU,mBACb,wBAAIA,UAAU,eAAd,sBACA,kBAAC,EAAD,QCIcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fc2c3cd2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ info }) => {\n  return (\n    <div className=\"fnf-card border rounded m-2 p-2 text-center shadow-sm\">\n      <img\n        src={`https://robohash.org/${info.id}?size=200x200`}\n        alt=\"fnf card\"\n      />\n      <div className=\"pt-4\">\n        <h4>{info.name}</h4>\n        <p>{info.username}</p>\n        <p>{info.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport { Card, SearchBox } from \"../components\";\n\n// if you want to use the hard coded data\n// import { data } from \"../data\";\n\nexport default class cardList extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      filteredList: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    // fetch data from the internet\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((user) =>\n        this.setState({ data: user, filteredList: user, loading: false })\n      );\n  }\n\n  onSearchChange = (event) => {\n    let searchField = event.target.value;\n    // filtered the list through contact name\n    const filteredList = this.state.data.filter((data) => {\n      return data.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    this.setState({ filteredList });\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchBox searchChange={this.onSearchChange} />\n        {this.state.loading ? (\n          // if data is still loading\n          <div class=\"loading d-flex justify-content-center m-5 p-5\">\n            <h2>Data is loading&ensp;</h2>\n            <div class=\"spinner-border\" role=\"status\">\n              <span class=\"sr-only\">Loading...</span>\n            </div>\n          </div>\n        ) : this.state.filteredList.length > 0 ? (\n          // if filtered list is not empty\n          <div className=\"card-list row d-flex align-items-center justify-content-center\">\n            {this.state.filteredList.map((card) => (\n              <Card key={card.id} info={card} />\n            ))}\n          </div>\n        ) : (\n          // if filteredList has no user information or search comes out empty\n          <div class=\"loading d-flex justify-content-center m-5 p-5\">\n            <h2>No data found...</h2>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nconst searchBox = ({ searchChange }) => {\n  return (\n    <div className=\"text-center m-3\">\n      <input\n        className=\"search-box\"\n        type=\"text\"\n        name=\"search\"\n        id=\"search\"\n        placeholder=\"Search friends and family\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default searchBox;\n","import React from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"container-fluid\">\n      <h1 className=\"text-center\">Friends 'N' Family</h1>\n      <CardList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}